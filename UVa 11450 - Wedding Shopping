/* UVa 11450 - Wedding Shopping - Top Down */
// this code is similar to recursive backtracking code
// Solved by Top-Down Backtracking


#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) a / __gcd(a, b) * b
#define mod 1000000007
#define TheAnt                        \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL);
int dx[] = {0, 0, 1, -1};
int dy[] = {1, -1, 0, 0};

vector<vector<int>> price(25, vector<int>(25));
int Money, item, inf = 1e15;
int dp[250][25];

int calc(int money_baki, int idx)
{
    if (money_baki < 0)
        return (-1LL) * inf;

    if (idx == item)
        return Money - money_baki;

    if (dp[money_baki][idx] != -1)
        return dp[money_baki][idx];

    int ans = -1;
    for (int i = 1; i <= price[idx][0]; i++)
        ans = max(ans, calc(money_baki - price[idx][i], idx + 1));

    return dp[money_baki][idx] = ans;
}
signed main()
{
    TheAnt;

    int t;
    cin >> t;
    while (t--)
    {
        cin >> Money >> item;

        for (int i = 0; i < item; i++)
        {
            cin >> price[i][0];
            for (int j = 1; j <= price[i][0]; j++)
                cin >> price[i][j];
        }

        memset(dp, -1, sizeof dp);

        int ans = calc(Money, 0);

        if (ans < 0)
            cout << "no solution" << '\n';
        else
            cout << ans << '\n';
    }

    return 0;
}
